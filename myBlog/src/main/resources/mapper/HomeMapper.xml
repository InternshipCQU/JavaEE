<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.demo.mapper.HomeMapper">
    <select id="tagToBlogs" resultType="com.example.demo.entity.view.HomeBlogView">
        SELECT `blogInfo`.blogId,`User`.userId,username, blogTitle, blogContent, createTime, clickNum, blogInfo.likesNum, commentNum, forwardNum, collectNum
        FROM blogInfo, `User`, blogTag, tagBlogInfo
        WHERE blogTag.tagName = #{tagName}
            AND blogTag.tagId = tagBlogInfo.tagId
            AND tagBlogInfo.blogId = blogInfo.blogId
			AND blogInfo.userId = `User`.userId;
    </select>

    <select id="searchBlogs" resultType="com.example.demo.entity.BlogInfo">
        SELECT blogInfo.blogId,blogInfo.blogTitle, blogInfo.blogContent, blogInfo.createTime,
            blogInfo.clickNum, blogInfo.likesNum, blogInfo.userId, blogInfo.tagId

        FROM blogInfo, blogTag, tagBlogInfo
        WHERE blogInfo.blogTitle LIKE "%"#{keyword}"%"
            OR (blogTag.tagName LIKE  "%"#{keyword}"%"
                AND blogTag.tagId = tagBlogInfo.tagId
                AND tagBlogInfo.blogId = blogInfo.blogId)
        GROUP BY blogId;;
    </select>

<!--    <select id="searchBlogs" resultType="com.example.demo.entity.view.HomeBlogView">-->
<!--        SELECT blogInfo.blogId, username, blogInfo.blogTitle, blogInfo.blogContent, blogInfo.createTime, blogInfo.clickNum, blogInfo.likesNum, commentNum, forwardNum, collectNum-->
<!--        FROM blogInfo, blogTag, tagBlogInfo,User-->
<!--        WHERE blogInfo.blogTitle LIKE "%"#{keyword}"%"-->
<!--            OR (blogTag.tagName LIKE  "%"#{keyword}"%"-->
<!--                AND blogTag.tagId = tagBlogInfo.tagId-->
<!--                AND blogInfo.userId = User.userId-->
<!--                AND tagBlogInfo.blogId = blogInfo.blogId);-->
<!--    </select>-->

    <select id="showHotBlogger" resultType="com.example.demo.entity.User">
        SELECT `User`.username, `User`.avatar ,`User`.userId
        FROM `User` ORDER BY `User`.likesNum DESC limit 6;
    </select>


    <select id="showRecommendBlogger" resultType="com.example.demo.entity.User">
        SELECT `User`.username, `User`.avatar,`User`.userId
        FROM `User`, userLike
        WHERE userLike.fansId = #{userId}
            AND userLike.userId = `User`.userId
        ORDER BY `User`.likesNum DESC limit 6;
    </select>

    <select id="getBlogs" resultType="com.example.demo.entity.BlogInfo">
        SELECT blogInfo.blogTitle, blogInfo.blogContent, blogInfo.createTime,
            blogInfo.clickNum, blogInfo.likesNum, blogInfo.userId, blogInfo.tagId
        FROM blogInfo
        ORDER BY `blogInfo`.clickNum DESC limit 10;
    </select>


    <select id="getCommentViews" resultType="com.example.demo.entity.view.CommentView">
        SELECT username, commentContent FROM blogComment, User
        WHERE blogId = #{blogId} And blogComment.userId = User.userId
        ORDER BY commentId DESC limit 3;
    </select>

    <select id="getBlogViews" resultType="com.example.demo.entity.view.HomeBlogView">
        SELECT blogId, `User`.userId,username, blogTitle, blogContent, createTime, clickNum, blogInfo.likesNum, commentNum, forwardNum, collectNum
        FROM blogInfo, `User`
        WHERE blogInfo.userId = User.userId
        ORDER BY likesNum DESC limit 10;
    </select>

    <select id="getRecommendBlogViews" resultType="com.example.demo.entity.view.HomeBlogView">
        SELECT blogInfo.blogId,`User`.userId,username, blogTitle, blogContent, createTime, clickNum, blogInfo.likesNum, commentNum, forwardNum, collectNum
        FROM blogInfo, `User`, tagBlogInfo
        WHERE blogInfo.userId = User.userId AND tagBlogInfo.tagId = #{tagId} AND blogInfo.blogId = tagBlogInfo.blogId
        ORDER BY likesNum DESC limit 5;
    </select>

    <select id="getTagMark" resultType="com.example.demo.entity.TagMark">
        SELECT TensorFlow, NumPy, PyTorch, IDEA, Tomcat, JavaEE, Django, Git, Python, Java, `C`, html
        FROM TagMark
        WHERE userId = #{userId}
    </select>
    
    <select id="showWantBlogger" resultType="com.example.demo.entity.User">
        SELECT `User`.username,`User`.avatar,`User`.userId
        FROM `User`,TagMark,blogInfo,blogTag
        WHERE TagMark.userId = 1
          AND blogTag.tagId = blogInfo.tagId
          AND blogInfo.userId = `User`.userId
          AND (select count(*) from userLike where userLike.userId= User.userId and userLike.fansId=#{userId})=0
          AND blogTag.tagName = (case
                                     when TagMark.`TensorFlow`>=TagMark.`NumPy`
                                         and TagMark.`TensorFlow`>=TagMark.`PyTorch`
                                         and TagMark.`TensorFlow`>=TagMark.`IDEA`
                                         and TagMark.`TensorFlow`>=TagMark.`Tomcat`
                                         and TagMark.`TensorFlow`>=TagMark.`JavaEE`
                                         and TagMark.`TensorFlow`>=TagMark.`Django`
                                         and TagMark.`TensorFlow`>=TagMark.`Git`
                                         and TagMark.`TensorFlow`>=TagMark.`Python`
                                         and TagMark.`TensorFlow`>=TagMark.`Java`
                                         and TagMark.`TensorFlow`>=TagMark.`C`
                                         and TagMark.`TensorFlow`>=TagMark.`html`
                                         then 'TensorFlow'

                                     when TagMark.`NumPy`>=TagMark.`TensorFlow`
                                         and TagMark.`NumPy`>=TagMark.`PyTorch`
                                         and TagMark.`NumPy`>=TagMark.`IDEA`
                                         and TagMark.`NumPy`>=TagMark.`Tomcat`
                                         and TagMark.`NumPy`>=TagMark.`JavaEE`
                                         and TagMark.`NumPy`>=TagMark.`Django`
                                         and TagMark.`NumPy`>=TagMark.`Git`
                                         and TagMark.`NumPy`>=TagMark.`Python`
                                         and TagMark.`NumPy`>=TagMark.`Java`
                                         and TagMark.`NumPy`>=TagMark.`C`
                                         and TagMark.`NumPy`>=TagMark.`html`
                                         then 'NumPy'

                                     when TagMark.`PyTorch`>=TagMark.`NumPy`
                                         and TagMark.`PyTorch`>=TagMark.`TensorFlow`
                                         and TagMark.`PyTorch`>=TagMark.`IDEA`
                                         and TagMark.`PyTorch`>=TagMark.`Tomcat`
                                         and TagMark.`PyTorch`>=TagMark.`JavaEE`
                                         and TagMark.`PyTorch`>=TagMark.`Django`
                                         and TagMark.`PyTorch`>=TagMark.`Git`
                                         and TagMark.`PyTorch`>=TagMark.`Python`
                                         and TagMark.`PyTorch`>=TagMark.`Java`
                                         and TagMark.`PyTorch`>=TagMark.`C`
                                         and TagMark.`PyTorch`>=TagMark.`html`
                                         then 'PyTorch'

                                     when TagMark.`IDEA`>=TagMark.`NumPy`
                                         and TagMark.`IDEA`>=TagMark.`PyTorch`
                                         and TagMark.`IDEA`>=TagMark.`TensorFlow`
                                         and TagMark.`IDEA`>=TagMark.`Tomcat`
                                         and TagMark.`IDEA`>=TagMark.`JavaEE`
                                         and TagMark.`IDEA`>=TagMark.`Django`
                                         and TagMark.`IDEA`>=TagMark.`Git`
                                         and TagMark.`IDEA`>=TagMark.`Python`
                                         and TagMark.`IDEA`>=TagMark.`Java`
                                         and TagMark.`IDEA`>=TagMark.`C`
                                         and TagMark.`IDEA`>=TagMark.`html`
                                         then 'IDEA'

                                     when TagMark.`Tomcat`>=TagMark.`NumPy`
                                         and TagMark.`Tomcat`>=TagMark.`PyTorch`
                                         and TagMark.`Tomcat`>=TagMark.`IDEA`
                                         and TagMark.`Tomcat`>=TagMark.`TensorFlow`
                                         and TagMark.`Tomcat`>=TagMark.`JavaEE`
                                         and TagMark.`Tomcat`>=TagMark.`Django`
                                         and TagMark.`Tomcat`>=TagMark.`Git`
                                         and TagMark.`Tomcat`>=TagMark.`Python`
                                         and TagMark.`Tomcat`>=TagMark.`Java`
                                         and TagMark.`Tomcat`>=TagMark.`C`
                                         and TagMark.`Tomcat`>=TagMark.`html`
                                         then 'Tomcat'

                                     when TagMark.`JavaEE`>=TagMark.`NumPy`
                                         and TagMark.`JavaEE`>=TagMark.`PyTorch`
                                         and TagMark.`JavaEE`>=TagMark.`IDEA`
                                         and TagMark.`JavaEE`>=TagMark.`Tomcat`
                                         and TagMark.`JavaEE`>=TagMark.`TensorFlow`
                                         and TagMark.`JavaEE`>=TagMark.`Django`
                                         and TagMark.`JavaEE`>=TagMark.`Git`
                                         and TagMark.`JavaEE`>=TagMark.`Python`
                                         and TagMark.`JavaEE`>=TagMark.`Java`
                                         and TagMark.`JavaEE`>=TagMark.`C`
                                         and TagMark.`JavaEE`>=TagMark.`html`
                                         then 'JavaEE'

                                     when TagMark.`Django`>=TagMark.`NumPy`
                                         and TagMark.`Django`>=TagMark.`PyTorch`
                                         and TagMark.`Django`>=TagMark.`IDEA`
                                         and TagMark.`Django`>=TagMark.`Tomcat`
                                         and TagMark.`Django`>=TagMark.`JavaEE`
                                         and TagMark.`Django`>=TagMark.`TensorFlow`
                                         and TagMark.`Django`>=TagMark.`Git`
                                         and TagMark.`Django`>=TagMark.`Python`
                                         and TagMark.`Django`>=TagMark.`Java`
                                         and TagMark.`Django`>=TagMark.`C`
                                         and TagMark.`Django`>=TagMark.`html`
                                         then 'Django'

                                     when TagMark.`Git`>=TagMark.`NumPy`
                                         and TagMark.`Git`>=TagMark.`PyTorch`
                                         and TagMark.`Git`>=TagMark.`IDEA`
                                         and TagMark.`Git`>=TagMark.`Tomcat`
                                         and TagMark.`Git`>=TagMark.`JavaEE`
                                         and TagMark.`Git`>=TagMark.`Django`
                                         and TagMark.`Git`>=TagMark.`TensorFlow`
                                         and TagMark.`Git`>=TagMark.`Python`
                                         and TagMark.`Git`>=TagMark.`Java`
                                         and TagMark.`Git`>=TagMark.`C`
                                         and TagMark.`Git`>=TagMark.`html`
                                         then 'Git'

                                     when TagMark.`Python`>=TagMark.`NumPy`
                                         and TagMark.`Python`>=TagMark.`PyTorch`
                                         and TagMark.`Python`>=TagMark.`IDEA`
                                         and TagMark.`Python`>=TagMark.`Tomcat`
                                         and TagMark.`Python`>=TagMark.`JavaEE`
                                         and TagMark.`Python`>=TagMark.`Django`
                                         and TagMark.`Python`>=TagMark.`Git`
                                         and TagMark.`Python`>=TagMark.`TensorFlow`
                                         and TagMark.`Python`>=TagMark.`Java`
                                         and TagMark.`Python`>=TagMark.`C`
                                         and TagMark.`Python`>=TagMark.`html`
                                         then 'Python'

                                     when TagMark.`Java`>=TagMark.`NumPy`
                                         and TagMark.`Java`>=TagMark.`PyTorch`
                                         and TagMark.`Java`>=TagMark.`IDEA`
                                         and TagMark.`Java`>=TagMark.`Tomcat`
                                         and TagMark.`Java`>=TagMark.`JavaEE`
                                         and TagMark.`Java`>=TagMark.`Django`
                                         and TagMark.`Java`>=TagMark.`Git`
                                         and TagMark.`Java`>=TagMark.`Python`
                                         and TagMark.`Java`>=TagMark.`TensorFlow`
                                         and TagMark.`Java`>=TagMark.`C`
                                         and TagMark.`Java`>=TagMark.`html`
                                         then 'Java'

                                     when TagMark.`C`>=TagMark.`NumPy`
                                         and TagMark.`C`>=TagMark.`PyTorch`
                                         and TagMark.`C`>=TagMark.`IDEA`
                                         and TagMark.`C`>=TagMark.`Tomcat`
                                         and TagMark.`C`>=TagMark.`JavaEE`
                                         and TagMark.`C`>=TagMark.`Django`
                                         and TagMark.`C`>=TagMark.`Git`
                                         and TagMark.`C`>=TagMark.`Python`
                                         and TagMark.`C`>=TagMark.`Java`
                                         and TagMark.`C`>=TagMark.`TensorFlow`
                                         and TagMark.`C`>=TagMark.`html`
                                         then 'C'

                                     when TagMark.`html`>=TagMark.`NumPy`
                                         and TagMark.`html`>=TagMark.`PyTorch`
                                         and TagMark.`html`>=TagMark.`IDEA`
                                         and TagMark.`html`>=TagMark.`Tomcat`
                                         and TagMark.`html`>=TagMark.`JavaEE`
                                         and TagMark.`html`>=TagMark.`Django`
                                         and TagMark.`html`>=TagMark.`Git`
                                         and TagMark.`html`>=TagMark.`Python`
                                         and TagMark.`html`>=TagMark.`Java`
                                         and TagMark.`html`>=TagMark.`C`
                                         and TagMark.`html`>=TagMark.`TensorFlow`
                                         then 'html'

                                     else null
            end);
    </select>

    <select id="checkIsLikeUser" resultType="String">
        SELECT `userLike`.userId
        FROM `userLike`
        WHERE `userLike`.userId = #{userId};
    </select>

    <select id="getTrending" resultType="com.example.demo.entity.BlogTag">
        SELECT tagName
        FROM blogTag, blogInfo
        WHERE blogTag.tagId = blogInfo.tagId
        ORDER BY blogInfo.clickNum DESC;
    </select>

    <select id="getNews" resultType="com.example.demo.entity.news">
        SELECT newsContent,userId,blogId
        FROM news, blogInfo
        WHERE news.fansId = #{fansId}
        AND news.isRead = 0
    </select>

    <update id="changeNews">
        update news set isRead = 1 where newsId = #{newsId}
    </update>

    <insert id="addNews">
        insert into `news`(`userId`,`fansId`,`newsContent`) values(#{userId},#{fansId},#{newsContent});
    </insert>

    <insert id="submitfollowing_1">
        insert into `userLike` (userId,fansId) values (#{userId},#{fansId});
    </insert>
    <update id="submitfollowing_2">
        update `User` set fansNum=fansNum+1
        where `userId`=#{userId};
    </update>

</mapper>
